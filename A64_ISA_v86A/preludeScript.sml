(*Generated by Lem from prelude.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extra_sailTheory sail2_instr_kindsTheory sail2_valuesTheory sail2_prompt_monadTheory sail2_operators_mwordsTheory sail2_promptTheory;

val _ = numLib.prefer_num();



val _ = new_theory "prelude"

(*open import Pervasives_extra*)
(*open import Sail2_instr_kinds*)
(*open import Sail2_values*)
(*open import Sail2_operators_mwords*)
(*open import Sail2_prompt_monad*)
(*open import Sail2_prompt*)

(*val __ReadMemory : forall 'rv 'n 'e. Size 'n => integer -> mword ty64 -> monad 'rv (mword 'n) 'e*)
val _ = Define `
 ((ReadMemory:int ->(64)words$word -> 'rv sail2_state_monad$sequential_state ->(('n words$word),'e)sail2_state_monad$result#'rv sail2_state_monad$sequential_state) n addr=  (sail2_state_monad$read_memS 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict Read_plain (( 64 : int):int) addr n))`;

(*val __WriteMemory : forall 'rv 'n 'e. Size 'n => integer -> mword ty64 -> mword 'n -> monad 'rv unit 'e*)
val _ = Define `
 ((WriteMemory:int ->(64)words$word -> 'n words$word -> 'rv sail2_state_monad$sequential_state ->((unit),'e)sail2_state_monad$result#'rv sail2_state_monad$sequential_state) n addr data=  (sail2_state_monad$bindS (sail2_state_monad$write_memS 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict instance_Sail2_values_Bitvector_Machine_word_mword_dict Write_plain (( 64 : int):int) addr n data) 
  (\b .  (case (b ) of ( _ ) => sail2_state_monad$returnS ()  ))))`;


(* TODO *)
(*val putchar : integer -> unit*)
val _ = Define `
 ((putchar0:int -> unit) _=  () )`;


(*val undefined_bitvector : forall 'rv 'n 'e. Size 'n => integer -> monad 'rv (mword 'n) 'e*)
val _ = Define `
 ((undefined_bitvector:int -> 'rv sail2_state_monad$sequential_state ->(('n words$word),'e)sail2_state_monad$result#'rv sail2_state_monad$sequential_state) n=  returnS ARB)`;


val _ = Define `
 ((undefined_unit:unit -> 'a sail2_state_monad$sequential_state ->((unit),'b)sail2_state_monad$result#'a sail2_state_monad$sequential_state) () =  (sail2_state_monad$returnS () ))`;

(*val undefined_vector : forall 'rv 'a 'e. integer -> 'a -> monad 'rv (list 'a) 'e*)
val _ = Define `
 ((undefined_vector:int -> 'a -> 'rv sail2_state_monad$sequential_state ->(('a list),'e)sail2_state_monad$result#'rv sail2_state_monad$sequential_state) len u=  (sail2_state_monad$returnS (repeat [u] len)))`;

val _ = Define `
 ((undefined_bits:int ->('c,('b words$word),'a)monad)=  undefined_bitvector)`;

val _ = Define `
 ((undefined_bit:unit -> 'a sail2_state_monad$sequential_state ->((bitU),'b)sail2_state_monad$result#'a sail2_state_monad$sequential_state) () =  (sail2_state_monad$returnS BU))`;

val _ = Define `
 ((undefined_string:unit -> 'a sail2_state_monad$sequential_state ->((string),'b)sail2_state_monad$result#'a sail2_state_monad$sequential_state) () =  (sail2_state_monad$returnS ARB))`;

(*val undefined_int : forall 'rv 'e. unit -> monad 'rv integer 'e*)
val _ = Define `
 ((undefined_int:unit -> 'rv sail2_state_monad$sequential_state ->((int),'e)sail2_state_monad$result#'rv sail2_state_monad$sequential_state) () =  returnS ARB)`;

val _ = Define `
 ((undefined_nat:unit -> 'a sail2_state_monad$sequential_state ->((int),'b)sail2_state_monad$result#'a sail2_state_monad$sequential_state) () =  returnS ARB)`;

val _ = Define `
 ((undefined_real:unit -> 'a sail2_state_monad$sequential_state ->((real),'b)sail2_state_monad$result#'a sail2_state_monad$sequential_state) () =  returnS ARB)`;

val _ = Define `
 ((undefined_range:int -> int -> 'a sail2_state_monad$sequential_state ->((int),'b)sail2_state_monad$result#'a sail2_state_monad$sequential_state) i j=  returnS (@n. i ≤ n ∧ n ≤ j))`;

val _ = Define `
 ((undefined_atom:'a -> 'b sail2_state_monad$sequential_state ->('a,'c)sail2_state_monad$result#'b sail2_state_monad$sequential_state) i=  (sail2_state_monad$returnS i))`;


(*type ty288*)
(*type ty320*)
(*type ty352*)
(*type ty384*)
(*type ty416*)
(*type ty448*)
(*type ty480*)
(*type ty512*)
(*type ty640*)
(*type ty768*)
(*type ty896*)
(*type ty1024*)
(*type ty1152*)
(*type ty1280*)
(*type ty1408*)
(*type ty1536*)
(*type ty1664*)
(*type ty1792*)
(*type ty1920*)
(*type ty2048*)
(*type ty2304*)
(*type ty2560*)
(*type ty2816*)
(*type ty3072*)
(*type ty3328*)
(*type ty3584*)
(*type ty3840*)
(*type ty4096*)
val _ = export_theory()

